name: Deploy to Ubuntu Server

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
    types: [closed]

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: npm run db:generate

      - name: Build application
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r .next deploy/
          cp -r public deploy/
          cp -r prisma deploy/
          cp package*.json deploy/
          cp next.config.ts deploy/
          cp ecosystem.config.js deploy/
          cp middleware.ts deploy/ 2>/dev/null || true
          cp .env deploy/ 2>/dev/null || true

      - name: Build completed
        run: echo "Build completed successfully. Deployment skipped - configure server secrets to enable deployment."

      - name: Deploy to server
        if: true
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Set variables
            APP_NAME="${{ secrets.APP_NAME }}"
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"

            # Create deployment directory if it doesn't exist
            mkdir -p $DEPLOY_PATH

            # Stop PM2 process if running
            pm2 stop $APP_NAME || true
            pm2 delete $APP_NAME || true

            # Backup current deployment
            if [ -d "$DEPLOY_PATH/current" ]; then
              mv $DEPLOY_PATH/current $DEPLOY_PATH/backup-$(date +%Y%m%d-%H%M%S) || true
            fi

            # Create new deployment directory
            mkdir -p $DEPLOY_PATH/current

      - name: Copy files to server
        if: true
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "deploy/*"
          target: ${{ secrets.DEPLOY_PATH }}/current/
          strip_components: 1

      - name: Start application with PM2
        if: true
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Set variables
            APP_NAME="${{ secrets.APP_NAME }}"
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"

            cd $DEPLOY_PATH/current

            # Create logs directory
            mkdir -p logs

            # Create .env file with production environment variables
            cat > .env << EOF
            DATABASE_URL="${{ secrets.DATABASE_URL }}"
            DIRECT_URL="${{ secrets.DIRECT_URL }}"
            NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}"
            NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"
            SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
            NEXT_PUBLIC_APP_URL="${{ secrets.NEXT_PUBLIC_APP_URL }}"
            GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
            GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            EOF

            # Install production dependencies
            npm ci --production

            # Generate Prisma client with environment variables
            DATABASE_URL="${{ secrets.DATABASE_URL }}" DIRECT_URL="${{ secrets.DIRECT_URL }}" npm run db:generate

            # Run database migrations if needed
            DATABASE_URL="${{ secrets.DATABASE_URL }}" DIRECT_URL="${{ secrets.DIRECT_URL }}" npm run db:push || true

            # Start application with PM2 using ecosystem file
            pm2 start ecosystem.config.js --env production
            pm2 save

            # Show PM2 status
            pm2 status
